{
    "1": {
		"id": "1",
        "title": "Echo",
        "description": "Echo stdin.",
        "tags": [
            "strings",
            "trivial"
        ],
        "sampleIO":"howdy -> howdy",
        "io": {
            "a\nb\nc":"a\nb\nc",
            "dodo":"dodo",
            "12321":"12321",
            "!@ ,.":"!@ ,."
        }
    },
    "2": {
		"id": "2",
        "description": "Return the reverse of input string",
        "tags": [
            "strings",
            "trivial"
        ],
        "sampleIO":"rotten -> nettor",
        "io": {
            "1": "1",
            "toggle": "elggot",
            "pop": "pop"
        }
    },
    "3": {
		"id": "3",
        "description": "If input is a palindrome, return 'true', else 'false'",
        "tags": [
            "strings",
            "medium"
        ],
        "sampleIO":"bob -> true",
        "io": {
            "bob": "true",
            "canal": "false",
            "a man, a plan, a canal: panama!": "true",
            "boot": "false",
            "":"false"
        }
    },
    "4": {
		"id": "4",
        "description": "Give two strings, calculate the hamming distance.",
        "sampleIO":"ACCAGGG|ACTATGG -> 2",
        "tags": [
            "strings",
            "medium"
        ],
        "io": {
            "GATTACA|GATTACA": "0",
            "GG|AA": "2",
            "TAGC|CGAT":"4",
            "AATG|AAA": "2"
        }
    },
    "5": {
		"id": "5",
        "description": "If input is an isogram, return 'true', else 'false'",
        "tags": [
            "strings",
            "medium"
        ],
        "sampleIO":"foolish -> false",
        "io":{
            "isogram":"true",
            "eleven":"false",
            "Alphabet":"false",
            "six-year-old":"true",
            "accentor":"false"
        }
    },
    "6": {
		"id": "6",
        "description": "Given N, return the difference between the square of the sum and the sum of the squares of the first N natural numbers",
        "sampleIO":"5 -> 170",
		  "tags": [
            "math",
            "medium"
        ],
        "io":{
            "1":"0",
            "100":"25164150"
        }
    },
    "7": {
		"id": "7",
        "description": "Return an acronym for the input",
        "tags": [
            "strings",
            "medium"
        ],
        "sampleIO": "Central Intelligence Agency -> CIA",
        "io": {
            "Portable Network Graphics":"PNG",
            "First In, First Out":"FIFO",
            "PHP: Hypertext Preprocessor":"PHP",
            "GNU Image Manipulation Program":"GIMP",
            "Complementary metal-oxide semiconductor":"CMOS"
        }
    },
    "8": {
		"id": "8",
        "description": "If input is a valid U.S. phone number (incl. area code), return just the digits. Otherwise return 'error'",
        "sampleIO" : "123.456.7890 -> 1234567890, 123456789 -> 'error'",
		  "tags": [
            "validation",
            "medium"
        ],
        "io": {
            "(123) 456-7890":"1234567890",
            "1234567890":"1234567890",
            "123-@:!-7890":"error"
        }
    },
    "9": {
		"id": "9",
        "description": "Return input encrypted using an atbash cipher",
        "tags": [
            "crypto",
            "hard"
        ],
        "sampleIO": "low -> old",
        "io": {
            "no":"ml",
            "mindblowingly": "nrmwyoldrmtob",
            "Truth is fiction.": "Gifgs rh urxgrlm."
        }
    },
    "10": {
		"ID": "10",
        "description": "can these queens attack each other? print 'error' on invalid position",
        "tags": [
            "chess",
            "hard"
        ],
        "sampleIO": "a1|a2 -> true",
        "io": {
            "b4|b4": "error",
            "a8|b9": "error",
            "b4|b7": "true",
            "a1|f6": "true",
            "b3|d7": "false"
        }
    },
    "11": {
		"ID": "11",
        "description": "find the last element of a list",
        "tags": [
            "lists",
            "trivial"
        ],
        "sampleIO": "1,b -> b",
        "io": {
            "1,2,3,4,5,6":"6",
            "1":"1",
            "foo,bar,baz": "baz",
            "a,b":"b"
        }
    },
    "12": {
		"ID": "12",
        "description": "Return the second to last element of input list",
        "tags": [
            "lists",
            "trivial"
        ],
        "sampleIO": "1,b -> 1",
        "io": {
            "1,2,3,4,5,6":"5",
            "foo,bar,baz": "bar",
            "a,b":"a",
            "a":"error"
        }
    },
    "13": {
		"ID": "13",
        "description": "find the nth element (1-indexed) of a list",
        "tags": [
            "lists",
            "trivial"
        ],
        "sampleIO": "1,2|2 -> 2",
        "io": {
            "1,2,3,4,5,6|3":"3",
            "foo,bar,baz|1": "foo",
            "a,b|2":"b",
            "1|1":"1"
        }
    },
    "14": {
		"ID": "14",
        "description": "flatten a list",
        "tags": [
            "lists",
            "medium"
        ],
        "sampleIO": "[[1],[2]] -> [1,2]",
        "io": {
            "[1,[2,3]]":"[1,2,3]",
            "[1,2]":"[1,2]",
            "[]":"[]",
            "[[[3]]]":"[3]",
            "[4,[5,[6],6],8]":"[4,5,6,6,8]"
        }
    },
    "15": {
		"ID": "15",
        "description": "eliminate consectutive duplicates in a list",
        "tags": [
            "lists",
            "medium"
        ],
        "sampleIO": "a22cc -> a2c",
        "io": {
            "aa":"a",
            "1111":"1",
            "11223344":"1234",
            "111121111":"121"
        }
    },
    "16": {
		"ID": "16",
        "description": "pack consecutive duplicates into sublists",
        "tags": [
            "lists",
            "medium"
        ],
        "sampleIO": "aa22cc -> [aa,22,cc]",
        "io": {
            "1111":"[1111]",
            "11223344":"[11,22,33,44]",
            "111121111":"[1111,2,1111]"
        }
    },
    "17": {
		"ID": "17",
        "description": "pack consectutive duplicates into a run length encoding list; singletons should be tagged with a number",
        "tags": [
            "lists",
            "hard"
        ],
		"sampleIO": "ee -> 2e",
        "io": {
            "a":"1a",
            "aaaa":"4a",
            "aabccd":"2a1b2c1d",
            "aaaa2aaaa":"4a1b4a"
        }
    },
    "18": {
		"ID": "18",
        "description": "pack consectutive duplicates into a run length encoding list; singletons should *not* be tagged with a number",
        "tags": [
            "lists",
            "hard"
        ],
		"sampleIO": "ee -> 2e",
        "io": {
            "a":"a",
            "aaaa":"4a",
            "aabccd":"2ab2cd",
            "aaaa2aaaa":"4ab4a"
        }
    },
    "19": {
		"ID": "19",
        "description": "decode a run length encoding list, singletons are not tagged with a number",
        "tags": [
            "lists",
            "hard"
        ],
		"sampleIO": "2e -> ee, abc -> abc",
        "io": {
            "a":"a",
            "4a":"aaaa",
            "2ab2cd":"aabccd",
            "4ab4a":"aaaabaaaa"
        }
    },
    "20": {
		"ID": "20",
        "description": "Return the input string with each character doubled.",
        "tags": [
            "lists",
            "medium"
        ],
		"sampleIO": "the -> tthhee",
        "io": {
            "123":"112233",
            "abc":"aabbcc",
            "aabbcc":"aaaabbbbcccc",
            "*":"**"
        }
    },
	 "21": {
		"ID": "21",
			"description":"Return the largest element in the input list",
		  "sampleIO": "1,4,5,2 -> 5",
		  "tags": [
					 "lists",
					 "trivial"
		  ],
		  "io": {
					 "10,4,5,-4,25,6": "25",
					 "1,2,3,4,5,6": "6",
					 "-3,-5,-10,-1000000":"-3"
		  }
	},
    "22": {
		"ID": "22",
            "description": "First input is a search term, second input is a list. Return 'true' if term occurs in list, else 'false'",
            "sampleIO":"dog|cat,mouse,donky,dog -> true",
            "tags": [
                "trivial",
                "search"
            ],
            "io": {
                "1|5,33,2,6,1,2":"true",
                "1|5,33,2,6,5,2":"false"
            }
        },
    "23": {
		"ID": "23",
            "description": "Combine two lists by alternating elements",
            "sampleIO":"a,b,c|1,2,3 -> a,1,b,2,c,3",
            "tags": [
                "trivial",
                "lists"
            ],
            "io": {
                "!,@,$,%|a,3,4,5":"!,a,@,3,$,4,%,5",
                "a,b,c,d|1,2,3,4":"a,1,b,2,c,3,d,4",
                "a,b|1,2,3,4":"a,1,b,2,3,4",
                "a,b,c,d|3,4":"a,3,b,4,c,d"
            }
        },
    "24": {
		"ID": "24",
            "description": "Rotates list arg[0] by arg[1] elements",
            "sampleIO":"1,2,3,4,5,6|2 -> 3,4,5,6,1,2",
            "tags": [
                ""
            ],
            "io": {
                "3,4,5,6,7|3":"6,7,3,4,5",
                "1,2,3,4,5|-2":"4,5,1,2,3"
            }
        },
    "25": {
		"ID": "25",
            "description": "Take a number and return it's list of digits in ascending order",
            "sampleIO":"3452 -> 2,3,4,5",
            "tags": [
                "easy",
                "lists"
            ],
            "io": {
                "1234":"1,2,3,4",
                "9321":"1,2,3,9",
                "23.43":"2,3,3,4"
            }
        },
    "26": {
		"ID": "26",
        "description": "Is the number prime?",
        "sampleIO": "7 -> true",
        "tags": [
            "math",
            "easy"
        ],
        "io": {
            "1": "true",
            "3": "true",
            "10": "false",
            "99": "false",
            "97": "true",
            "100": "false"
        }
    },
    "27": {
		"ID": "27",
        "description": "Find the greatest common divisor of two numbers.",
        "sampleIO": "8|16 -> 8",
        "tags": [
            "math",
            "medium"
        ],
        "io": {
            "36|63": "9",
            "47|89": "1",
            "165|80": "5"
        }
    },
    "28": {
		"ID": "28",
        "description": "List all the prime factors of a number.",
        "sampleIO": "315 -> 3,3,5,7",
        "tags": [
            "math",
            "medium"
        ],
        "io": {
            "65": "5,13",
            "88": "2,2,2,11",
            "105": "3,5,7",
            "49": "7,7",
            "199": "199"
        }
    },
    "29": {
		"ID": "29",
        "description": "XOR two hexademical numbers together",
        "sampleIO": "45|99 -> dc",
        "tags": [
            "math",
            "easy"
        ],
        "io": {
            "a|c" : "6",
            "a5|5a" : "ff",
            "56|bb": "ed",
            "0|0": "0"
        }
    },
    "30": {
		"ID": "30",
        "description": "bitwise AND two decimal numbers together",
        "sampleIO": "45|99 -> 33",
        "tags": [
            "math",
            "easy"
        ],
        "io": {
            "10|12" : "8",
            "199|78" : "70",
            "45|45": "45",
            "66|1": "0",
            "65|1": "1"
        }
    },
    "31": {
        "ID": "31",
        "description": "Take base ten input and return its binary",
        "sampleIO":"25 -> 11001",
        "tags": [
            "medium",
            "encoding"
        ],
        "io": {
            "2433":"100110000001",
            "0":"0",
            "2":"10"
        }
    }
}
